
name: Build Image (CMD)

# Controls when the workflow will run
on:
  push:
    branches-ignore:
      - main
    paths:
      - Dockerfile

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: false
        default: 'latest'

  schedule:
    - cron: '0    12   2/3  *    *'
##           │    │    │    │    └─ day of the week  (0 -  6 or SUN-SAT)
##           │    │    │    └────── month            (1 - 12 or JAN-DEC)
##           │    │    └─────────── day of the month (1 - 31)
##           │    └──────────────── hour             (0 - 23)
##           └───────────────────── minute           (0 - 59)

env:
  LOCAL_IMAGE     : "local-image:${{ github.sha }}"
  REPOSITORY_NAME : "${{ github.ref_name }}"
    ## the branch name (`github.ref_name`) of the github repository is the repository name in the container registry
  TAG_NAME        : "${{ github.event.inputs.tag_name || 'latest' }}"

jobs:

  caller:
    ##if: ${{ github.ref_name == 'main' && github.event_name == 'schedule' }}
    if: ${{ github.ref_name == 'main' }}
    runs-on: windows-2022

    steps:
      - name: Trigger Other Branches
        shell: cmd
        env:
          OWNER_REPO   : ${{ github.repository }}
          RUN_ID       : ${{ github.run_id }}
          BRANCH_THIS  : ${{ github.ref_name }}
          WORKFLOW_REF : ${{ github.workflow_ref }}
          ACTION_TOKEN : ${{ secrets.GITHUB_TOKEN }}
        run: |
          REM [for](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/for "for {%% | %}<variable> in (<set>) do <command> [<commandlineoptions>]")
          REM [Create a workflow dispatch event](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event)
          set "API_RUN=https://api.github.com/repos/%OWNER_REPO%/actions/runs/%RUN_ID%"
          REM Get WORKFLOW_ID
          for /f %%I in ('
            curl --location ^
              --header "Accept: application/vnd.github+json" ^
              --header "X-GitHub-Api-Version: 2022-11-28" ^
              "%API_RUN%" ^| jq --raw-output ".workflow_id"
          ') do (
            set "WORKFLOW_ID=%%I"
          )
          REM WORKFLOW_FILE is interchangeable with WORKFLOW_ID
          for /f "tokens=1 delims=@" %%F in ("%WORKFLOW_REF%") do (
            set "WORKFLOW_FILE=%%F"
          )
          for %%F in ("%WORKFLOW_FILE%") do (
            set "WORKFLOW_FILE=%%~nxF"
          ) 
          echo WORKFLOW_ID=%WORKFLOW_ID%
          echo WORKFLOW_FILE=%WORKFLOW_FILE%
          set "API_DISPATCH=https://api.github.com/repos/%OWNER_REPO%/actions/workflows/%WORKFLOW_ID%/dispatches"
          REM https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event
          REM [Use the REST API to get branches](https://docs.github.com/en/rest/branches/branches)
          set "API_BRANCH=https://api.github.com/repos/%GITHUB_REPOSITORY%/branches"
          setlocal enabledelayedexpansion
          for /f %%B in ('
            curl --location ^
              --header "Accept: application/vnd.github+json" ^
              --header "X-GitHub-Api-Version: 2022-11-28" ^
              "%API_BRANCH%" ^|^
            jq --raw-output ".[].name"
          ') do (
            if "%%B" neq "%BRANCH_THIS%" (
              set "CMD_DATA=jq --arg "b" "%%B" --null-input --compact-output "{\"ref\":$b}""
              for /f %%D in ('!CMD_DATA!') do (
                echo %API_DISPATCH%
                echo %%D
                jq --arg "b" "test" --null-input --raw-output --compact-output "{\"ref\":$b}"
                curl --location ^
                  --request POST ^
                  --header "Accept: application/vnd.github+json" ^
                  --header "Authorization: Bearer %ACTION_TOKEN%" ^
                  --header "X-GitHub-Api-Version: 2022-11-28" ^
                  "%API_DISPATCH%" ^
                  --data %%D
              )
            )
          )
          endlocal

  process:
    if: ${{ github.ref_name != 'main' }}
    # The type of runner that the job will run on
    runs-on: windows-2022
    environment: 
      name: publish0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Build Docker Image
        shell: cmd
        run: |
          docker build --no-cache --tag "%LOCAL_IMAGE%" --file "Dockerfile" .
      
      - name: Test
        shell: cmd
        env:
          FOLDER_TEST: 'Test'
        run: |
          if exist "%FOLDER_TEST%\" (
            set "TEST_IMAGE=%LOCAL_IMAGE%"
            for %%F in ("%FOLDER_TEST%\*.cmd" "%FOLDER_TEST%\*.bat") do (
              echo running: %%F
              cmd.exe "%%F"
            )
          )
      
      - name: Publish
        shell: cmd
        env:
          SERVER    : "${{ secrets.REGISTRY_SERVER }}"
          NAMESPACE : "${{ secrets.REGISTRY_NAMESPACE }}"
          USERNAME  : "${{ secrets.REGISTRY_USERNAME }}"
          PASSWORD  : "${{ secrets.REGISTRY_PASSWORD }}"
        run: |
          rem Define Variables
          set "IMAGE_NAME=%NAMESPACE%/%REPOSITORY_NAME%:%TAG_NAME%"
          rem
          docker tag "%LOCAL_IMAGE%" "%IMAGE_NAME%"
          set /p="%PASSWORD%" | docker login --username "%USERNAME%" --password-stdin "%SERVER%"
          docker push "%IMAGE_NAME%"
          docker logout

      - name: Clean
        shell: cmd
        env:
          NAMESPACE : "${{ secrets.REGISTRY_NAMESPACE }}"
        run: |
          rem Define Variables
          set "IMAGE_NAME=%NAMESPACE%/%REPOSITORY_NAME%:%TAG_NAME%"
          rem
          docker rmi --force "%LOCAL_IMAGE%"
          docker rmi --force "%IMAGE_NAME%"
